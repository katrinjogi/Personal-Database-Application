/*1 Show the create table statement that defines foreign 
key constraints. Create an update that violates the foreign key constraint. List 
the update command, and then show the output of running this update.*/

/*Foreign keys in tables Hosts, Employs, Pays, CollectsFrom, Buy, Post and WorksIn 
with references to tables E_store, Item, Employee, Seller, Buyer and Department */

create table Hosts (
  storeName varchar(20),
  IID int NOT NULL,
  PRIMARY KEY (storeName, IID),
  Foreign Key (storeName) references E_store(storeName),
  Foreign Key (IID) references Item(IID)
  );

create table Employs (
  storeName varchar(20),
  eID int NOT NULL,
  startDate date,
  endDate date,
  PRIMARY KEY (storeName, eID),
  Foreign Key (storeName) references E_store(storeName),
  Foreign Key (eID) references Employee(eID)
  );

create table Pays (
  payID int NOT NULL,
  storeName varchar(20),
  sID int NOT NULL,
  payday date,
  amount decimal(7,2),
  PRIMARY KEY (storeName, payID, sID),
  Foreign Key (storeName) references E_store(storeName),
  Foreign Key (sID) references Seller(sID)
  );


create table CollectsFrom (
  storeName varchar(20),
  bID int(10) NOT NULL,
  bdate date,
  PRIMARY KEY (storeName, bID, bdate),
  Foreign Key (storeName) references E_store(storeName),
  Foreign Key (bID) references Buyer(bID)
  );


create table Buy (
  bID int(10) NOT NULL,
  IID int(11) NOT NULL,
  buydate date,
  PRIMARY KEY (bID, IID),
  Foreign Key (bID) references Buyer(bID),
  Foreign Key (IID) references Item(IID)
  );


create table Post (
  IID int NOT NULL,
  sID int NOT NULL,
  pdate date,
  PRIMARY KEY (IID, sID),
  Foreign Key (IID) references Item(IID),
  Foreign Key (sID) references Seller(sID)
  );


create table WorksIn (
  eID int NOT NULL,
  dID int NOT NULL,
  PRIMARY KEY (eID, dID),
  Foreign Key (eID) references Employee(eID),
  Foreign Key (dID) references Department(dID)
  );



/*When trying to update the department dId = 8 to department dId = 9 in table WorksIn,
table WorksIn Foreign Key (dID) references Department(dID), table Department does 
not have dId = 9, thus the update does not go through*/


--OUTPUT

mysql> select * from WorksIn
    ->   where did = 8
    ->   ;
+-----+-----+
| eID | dID |
+-----+-----+
| 605 |   8 |
| 606 |   8 |
| 625 |   8 |
| 629 |   8 |
| 634 |   8 |
| 635 |   8 |
+-----+-----+
6 rows in set (0.00 sec)

mysql> 
mysql> update WorksIn
    ->   set did = did + 1
    ->   where did = 8
    ->   ;
ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`estore`.`worksin`, CONSTRAINT `worksin_ibfk_2` FOREIGN KEY (`dID`) REFERENCES `department` (`dID`))
mysql> 



/*2 (15 points) Write a MySQL procedure or function (your choice) and script that 
calls this procedure/function. This procedure/function should be logical for your 
database and should include one or more inputs and an output. After calling the 
procedure, you should print the results of the output. If your procedure/function 
makes multiple database state changes, document the changes with before/after select 
commands showing a (small) set of data that is changed. Include prose (English) that 
describes what the procedure/function does.*/

/*The procedure Purchases takes two inputs (begin date and end date) from user, and returns
the list of dates in the given timeframe, the corresponding number of purchases and the 
total daily amount of these purchases. In addition, the procedure returns the total number
of purchases into a variable @totalCount and total amount of purchases into the variable
@totalAmount*/  

--SCRIPT

set@startDate = "2023-10-01" ;
set@endDate = "2023-10-31" ;
set@totalCount = 0 ;
set@totalAmt = 0 ;

drop procedure if exists Purchases;

delimiter //
create procedure Purchases(IN startDate date, IN endDate date, OUT totalCount int, OUT totalAmt int) 
begin
  select count(*) into totalCount
  from Buyer B
  join Buy Y on B.bid = Y.bid
  where buydate >= startDate 
  and buydate <= endDate ;

  select sum(I.price) into totalAmt
  from buy Y 
  join Item I on I.iid = Y.iid
  where buydate >= startDate 
  and buydate <= endDate ;

  select "Daily breakdown of October 2023 purchases' item count and amount" as " " ;
  select Y.buydate, count(*), sum(I.price) from buy Y 
  join Item I on I.iid = Y.iid
  where buydate >= startDate 
  and buydate <= endDate
  group by Y.buydate 
  order by Y.buydate ;
end //
delimiter ;

call Purchases(@startDate, @endDate, @totalCount, @totalAmt);

select @totalCount ;
select @totalAmt ;

--OUTPUT

set@startDate = "2023-10-01" ;
Query OK, 0 rows affected (0.00 sec)

mysql> set@endDate = "2023-10-31" ;
Query OK, 0 rows affected (0.00 sec)

mysql> set@totalCount = 0 ;
Query OK, 0 rows affected (0.00 sec)

mysql> set@totalAmt = 0 ;
Query OK, 0 rows affected (0.00 sec)

mysql> drop procedure if exists Purchases;
Query OK, 0 rows affected (0.00 sec)

mysql> delimiter //
mysql> create procedure Purchases(IN startDate date, IN endDate date, OUT totalCount int, OUT totalAmt int) 
    -> begin
    ->   select count(*) into totalCount
    ->   from Buyer B
    ->   join Buy Y on B.bid = Y.bid
    ->   where buydate >= startDate 
    ->   and buydate <= endDate ;
    -> 
    ->   select sum(I.price) into totalAmt
    ->   from buy Y 
    ->   join Item I on I.iid = Y.iid
    ->   where buydate >= startDate 
    ->   and buydate <= endDate ;
    -> 
    ->   select "Daily breakdown of October 2023 purchases' item count and amount" as " " ;
    ->   select Y.buydate, count(*), sum(I.price) from buy Y 
    ->   join Item I on I.iid = Y.iid
    ->   where buydate >= startDate 
    ->   and buydate <= endDate
    ->   group by Y.buydate 
    ->   order by Y.buydate ;
    -> end //
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql> delimiter ;
mysql> call Purchases(@startDate, @endDate, @totalCount, @totalAmt);
+------------------------------------------------------------------+
|                                                                  |
+------------------------------------------------------------------+
| Daily breakdown of October 2023 purchases' item count and amount |
+------------------------------------------------------------------+
1 row in set (0.02 sec)

+------------+----------+--------------+
| buydate    | count(*) | sum(I.price) |
+------------+----------+--------------+
| 2023-10-01 |        3 |           91 |
| 2023-10-02 |        6 |         1480 |
| 2023-10-03 |        6 |         1730 |
| 2023-10-04 |        7 |         1840 |
| 2023-10-05 |        5 |         1015 |
| 2023-10-06 |       12 |         4107 |
| 2023-10-07 |        5 |         1412 |
| 2023-10-08 |        7 |         1319 |
| 2023-10-09 |        7 |         1802 |
| 2023-10-10 |       10 |         2506 |
| 2023-10-11 |        9 |         2956 |
| 2023-10-12 |        3 |          671 |
| 2023-10-13 |        9 |         1700 |
| 2023-10-14 |        6 |         1268 |
| 2023-10-15 |        7 |         2317 |
| 2023-10-16 |        5 |         1261 |
| 2023-10-17 |        6 |         1667 |
| 2023-10-18 |        5 |         1104 |
| 2023-10-19 |        3 |         1162 |
| 2023-10-20 |        7 |         2572 |
| 2023-10-21 |        8 |         2236 |
| 2023-10-22 |        6 |         1922 |
| 2023-10-23 |        3 |          894 |
| 2023-10-24 |        3 |          618 |
| 2023-10-25 |        6 |         1776 |
| 2023-10-26 |        9 |         2192 |
| 2023-10-27 |        7 |         1817 |
| 2023-10-28 |        8 |         1703 |
| 2023-10-29 |        8 |         1605 |
| 2023-10-30 |        6 |         2007 |
| 2023-10-31 |        4 |         1013 |
+------------+----------+--------------+
31 rows in set (0.03 sec)

Query OK, 0 rows affected, 1 warning (0.03 sec)

mysql> select @totalCount ;
+-------------+
| @totalCount |
+-------------+
|         196 |
+-------------+
1 row in set (0.00 sec)

mysql> select @totalAmt ;
+-----------+
| @totalAmt |
+-----------+
|     51763 |
+-----------+
1 row in set (0.00 sec)


/*3 (15 points) Create an index and show how it speeds up two types of queries: 
1) a selection on a single relation, and 
2) a selection that involves a join. 
Note: To get times that will be measurably different, you will likely need to 
populate your databases with a larger dataset.*/

/*I created a new table PostWithIndex with an index on date, loaded with the same
data as table Post (49,999 tuples). 
1) a query for a count of posts in a one-year period - single relation
2) a query for a count of posts in a one-year period with a quantity > 15 and the 
count of respective sellers - three relations
both queries ran faster with the table with index*/

--SCRIPT

drop table if exists PostWithIndex ;

create table PostWithIndex (
  IID int NOT NULL,
  sID int NOT NULL,
  pdate date,
  index(pdate), 
  PRIMARY KEY (IID, sID),
  Foreign Key (IID) references Item(IID),
  Foreign Key (sID) references Seller(sID)
  );

load data local infile '/Users/katrin/Documents/Kool/DU/DatabaseMgmt_3421/Project/post.txt'
  into table PostWithIndex
  fields terminated by ","
  lines terminated by "\n"  ;

select count(*) from Post
  where pdate between "2020-10-01" and "2021-09-30" ;

select count(*) from PostWithIndex
  where pdate between "2020-10-01" and "2021-09-30" ;

select count(*), count(distinct S.sid), sum(I.price) from Post P
  join Item I on I.iid = P.iid
  join Seller S on S.sid = P.sid
  where pdate between "2020-10-01" and "2021-09-30" 
  and I.quantity > 15 ;

select count(*), count(distinct S.sid), sum(I.price) from PostWithIndex P
  join Item I on I.iid = P.iid
  join Seller S on S.sid = P.sid
  where pdate between "2020-10-01" and "2021-09-30" 
  and I.quantity > 15 ;

--OUTPUT

drop table if exists PostWithIndex ;
Query OK, 0 rows affected (0.02 sec)

mysql> 
mysql> create table PostWithIndex (
    ->   IID int NOT NULL,
    ->   sID int NOT NULL,
    ->   pdate date,
    ->   index(pdate), 
    ->   PRIMARY KEY (IID, sID),
    ->   Foreign Key (IID) references Item(IID),
    ->   Foreign Key (sID) references Seller(sID)
    ->   );
Query OK, 0 rows affected (0.01 sec)

mysql> 
mysql> load data local infile '/Users/katrin/Documents/Kool/DU/DatabaseMgmt_3421/Project/post.txt'
    ->   into table PostWithIndex
    ->   fields terminated by ","
    ->   lines terminated by "\n"  ;
Query OK, 49999 rows affected (0.33 sec)
Records: 49999  Deleted: 0  Skipped: 0  Warnings: 0

mysql> select count(*) from Post
    ->   where pdate between "2020-10-01" and "2021-09-30" ;
+----------+
| count(*) |
+----------+
|     1391 |
+----------+
1 row in set (0.03 sec)

mysql> select count(*) from PostWithIndex
    ->   where pdate between "2020-10-01" and "2021-09-30" ;
+----------+
| count(*) |
+----------+
|     1391 |
+----------+
1 row in set (0.00 sec)

mysql> select count(*), count(distinct S.sid), sum(I.price) from Post P
    ->   join Item I on I.iid = P.iid
    ->   join Seller S on S.sid = P.sid
    ->   where pdate between "2020-10-01" and "2021-09-30" 
    ->   and I.quantity > 15 ;
+----------+-----------------------+--------------+
| count(*) | count(distinct S.sid) | sum(I.price) |
+----------+-----------------------+--------------+
|      365 |                   363 |        87092 |
+----------+-----------------------+--------------+
1 row in set (0.03 sec)

mysql> select count(*), count(distinct S.sid), sum(I.price) from PostWithIndex P
    ->   join Item I on I.iid = P.iid
    ->   join Seller S on S.sid = P.sid
    ->   where pdate between "2020-10-01" and "2021-09-30" 
    ->   and I.quantity > 15 ;
+----------+-----------------------+--------------+
| count(*) | count(distinct S.sid) | sum(I.price) |
+----------+-----------------------+--------------+
|      365 |                   363 |        87092 |
+----------+-----------------------+--------------+
1 row in set (0.01 sec)
